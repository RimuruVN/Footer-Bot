# (c) @AbirHasan2005

import shutil
import psutil
import asyncio
from pyromod import listen
from asyncio import TimeoutError
from pyrogram import Client, filters
from pyrogram.errors import UserNotParticipant, FloodWait
from pyrogram.types import InlineKeyboardMarkup, InlineKeyboardButton, Message, CallbackQuery

from configs import Config
from helpers.database.access_db import db
from helpers.human_readable import humanbytes
from helpers.database.add_user import AddUserToDatabase
from helpers.settings import ShowSettings
from helpers.broadcast import broadcast_handler
from helpers.fetch_me import FetchMeOnChat
from helpers.add_footer import AddFooter

AHBot = Client(
    session_name=Config.SESSION_NAME,
    api_id=Config.API_ID,
    api_hash=Config.API_HASH,
    bot_token=Config.BOT_TOKEN
)


@AHBot.on_message(filters.private & filters.command("start"))
async def _start(bot: Client, m: Message):
    await AddUserToDatabase(bot, m)
    try:
        await m.reply_text(
            Config.START_TEXT,
            reply_markup=InlineKeyboardMarkup(
                [
                    [InlineKeyboardButton("OWOHUB üîû", url="https://t.me/owohub"), InlineKeyboardButton("K√äNH SEX üîû", url="https://t.me/kenhsex")],
                    [InlineKeyboardButton("Developer - @gimsuri", url="https://t.me/gimsuri")]
                ]
            ),
            quote=True
        )
    except FloodWait as e:
        await asyncio.sleep(e.x)
        await m.reply_text("Kh√¥ng c√≥ DDoS Plox!")


@AHBot.on_message(filters.private & filters.command("settings"))
async def _settings(bot: Client, event: Message):
    await AddUserToDatabase(bot, event)
    editable = await event.reply_text("Vui l√≤ng ch·ªù ...", quote=True)
    await ShowSettings(editable, user_id=event.from_user.id)


@AHBot.on_message(filters.channel & (filters.video | filters.document) & ~filters.edited & ~filters.private)
async def add_footer(bot: Client, event: Message):
    on_event = await db.find_user_id(event.chat.id)
    if on_event is None:
        return
    _I, _err = await FetchMeOnChat(bot, chat_id=event.chat.id)
    if _I == 404:
        print(f"Kh√¥ng th·ªÉ ch·ªânh s·ª≠a tin nh·∫Øn trong {event.chat.id} !\nError: {_err}")
        return
    service_on = await db.get_service_on(int(on_event))
    footer_text = await db.get_footer_text(int(on_event))
    is_forward = event.forward_from_chat or event.forward_from
    if (_I.can_edit_messages is True) and (service_on is True) and (footer_text is not None) and (is_forward is None):
        await AddFooter(bot, event, footer_text, int(on_event))


@AHBot.on_message(filters.channel & filters.text & ~filters.edited & ~filters.private, group=-1)
async def add_text_footer(bot: Client, event: Message):
    on_event = await db.find_user_id(event.chat.id)
    if on_event is None:
        return
    _I, _err = await FetchMeOnChat(bot, chat_id=event.chat.id)
    if _I == 404:
        print(f"Kh√¥ng th·ªÉ ch·ªânh s·ª≠a tin nh·∫Øn trong {event.chat.id} !\nError: {_err}")
        return
    service_on = await db.get_service_on(int(on_event))
    footer_text = await db.get_footer_text(int(on_event))
    also_footer2photo = await db.get_add_photo_footer(int(on_event))
    is_forward = event.forward_from_chat or event.forward_from
    if (_I.can_edit_messages is True) and (service_on is True) and (footer_text is not None) and (is_forward is None) and (also_footer2photo is True):
        await AddFooter(bot, event, footer_text, int(on_event))


@AHBot.on_message(filters.channel & filters.photo & ~filters.edited & ~filters.private)
async def add_text_footer(bot: Client, event: Message):
    on_event = await db.find_user_id(event.chat.id)
    if on_event is None:
        return
    _I, _err = await FetchMeOnChat(bot, chat_id=event.chat.id)
    if _I == 404:
        print(f"Kh√¥ng th·ªÉ ch·ªânh s·ª≠a tin nh·∫Øn trong {event.chat.id} !\nError: {_err}")
        return
    service_on = await db.get_service_on(int(on_event))
    footer_text = await db.get_footer_text(int(on_event))
    also_footer2text = await db.get_add_text_footer(int(on_event))
    is_forward = event.forward_from_chat or event.forward_from
    if (_I.can_edit_messages is True) and (service_on is True) and (footer_text is not None) and (is_forward is None) and (also_footer2text is True):
        await AddFooter(bot, event, footer_text, int(on_event))


@AHBot.on_message(filters.private & filters.command("broadcast") & filters.user(Config.BOT_OWNER) & filters.reply)
async def _broadcast(_, event: Message):
    await broadcast_handler(event)


@AHBot.on_message(filters.private & filters.command("status") & filters.user(Config.BOT_OWNER))
async def _status(_, event: Message):
    total, used, free = shutil.disk_usage(".")
    total = humanbytes(total)
    used = humanbytes(used)
    free = humanbytes(free)
    cpu_usage = psutil.cpu_percent()
    ram_usage = psutil.virtual_memory().percent
    disk_usage = psutil.disk_usage('/').percent
    total_users = await db.total_users_count()
    await event.reply_text(
        text=f"**T·ªïng dung l∆∞·ª£ng ƒëƒ©a:** {total} \n**Kh√¥ng gian ƒë∆∞·ª£c s·ª≠ d·ª•ng:** {used}({disk_usage}%) \n**Kh√¥ng gian c√≤n tr·ªëng:** {free} \n**S·ª≠ d·ª•ng CPU:** {cpu_usage}% \n**S·ª≠ d·ª•ng RAM:** {ram_usage}%\n\n**T·ªïng s·ªë ng∆∞·ªùi d√πng trong DB:** `{total_users}`",
        parse_mode="Markdown",
        quote=True
    )


@AHBot.on_message(filters.private & filters.command("disable") & filters.user(Config.BOT_OWNER))
async def handler_disabler(bot: Client, event: Message):
    if len(event.command) > 1:
        if event.command[1].startswith("-100"):
            get_user_id = await db.find_user_id(channel_id=int(event.command[1]))
            if get_user_id is None:
                await event.reply_text(f"Tr√≤ chuy·ªán kh√¥ng t√¨m th·∫•y trong c∆° s·ªü d·ªØ li·ªáu!")
            else:
                await db.delete_user(user_id=get_user_id)
                await event.reply_text(f"·ªØ li·ªáu ng∆∞·ªùi d√πng c·ªßa {str(get_user_id)} ƒë√£ x√≥a kh·ªèi c∆° s·ªü d·ªØ li·ªáu!")
                await bot.leave_chat(chat_id=event.chat.id)
        else:
            await db.delete_user(user_id=int(event.command[1]))
            await event.reply_text(f"D·ªØ li·ªáu ng∆∞·ªùi d√πng c·ªßa {event.command[1]} ƒë√£ x√≥a kh·ªèi c∆° s·ªü d·ªØ li·ªáu!")


@AHBot.on_callback_query()
async def callback_handlers(bot: Client, cb: CallbackQuery):
    if cb.message.chat.type not in ["private"]:
        return
    if "triggerService" in cb.data:
        cache_service_on = await db.get_service_on(cb.from_user.id)
        await db.set_service_on(cb.from_user.id, service_on=(False if (cache_service_on is True) else True))
        await cb.answer("ƒê√£ thay ƒë·ªïi ch·∫ø ƒë·ªô d·ªãch v·ª• th√†nh c√¥ng", show_alert=True)
        await ShowSettings(cb.message, user_id=cb.from_user.id)
    elif "setAlsoFooter2Text" in cb.data:
        cache_also_footer2text = await db.get_add_text_footer(cb.from_user.id)
        await db.set_add_text_footer(cb.from_user.id, add_text_footer=(False if (cache_also_footer2text is True) else True))
        await cb.answer(f"Ok, T√¥i s·∫Ω {'kh√¥ng ' if (cache_also_footer2text is True) else ''}th√™m Ch√¢n trang v√†o Tin nh·∫Øn VƒÉn b·∫£n n·ªØa!", show_alert=True)
        await ShowSettings(cb.message, user_id=cb.from_user.id)
    elif "setAlsoFooter2Photo" in cb.data:
        cache_also_footer2photo = await db.get_add_photo_footer(cb.from_user.id)
        await db.set_add_photo_footer(cb.from_user.id, add_photo_footer=(False if (cache_also_footer2photo is True) else True))
        await cb.answer(f"Ok, T√¥i s·∫Ω {'kh√¥ng ' if (cache_also_footer2photo is True) else ''}th√™m Ch√¢n trang v√†o ·∫¢nh!", show_alert=True)
        await ShowSettings(cb.message, user_id=cb.from_user.id)
    elif "setFooterText" in cb.data:
        await cb.message.edit("B√¢y gi·ªù g·ª≠i cho t√¥i vƒÉn b·∫£n ch√¢n trang. T·ªëi ƒëa 1024 k√Ω t·ª±.\n\nNh·∫≠p /cancel ƒë·ªÉ H·ªßy qu√° tr√¨nh n√†y.")
        try:
            event_: Message = await bot.listen(cb.message.chat.id, filters=filters.text, timeout=300)
            if event_.text:
                if event_.text == "/cancel":
                    await event_.delete(True)
                    await cb.message.edit("Process Cancelled!")
                else:
                    cache_footer = event_.text.markdown
                    await db.set_footer_text(cb.from_user.id, cache_footer)
                    await cb.message.edit(
                        text=f"Ch√¢n trang ƒë√£ ƒë∆∞·ª£c th√™m!\n\n**VƒÉn b·∫£n ch√¢n trang:**\n{cache_footer}",
                        reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("ƒêi t·ªõi C√†i ƒë·∫∑t", callback_data="showSettings")]])
                    )
        except TimeoutError:
            await cb.message.edit("5 ph√∫t tr√¥i qua!\nB√¢y gi·ªù k√≠ch ho·∫°t l·∫°i t·ª´ /settings üòê")
    elif "showSettings" in cb.data:
        await ShowSettings(cb.message, user_id=cb.from_user.id)
    elif "rmFooterText" in cb.data:
        await db.set_footer_text(cb.from_user.id, footer_text=None)
        await cb.answer("Footer Text Removed!", show_alert=True)
        await ShowSettings(cb.message, user_id=cb.from_user.id)
    elif "showFooterText" in cb.data:
        footer_text = await db.get_footer_text(cb.from_user.id)
        await cb.message.edit(f"**VƒÉn b·∫£n ch√¢n trang:**\n{footer_text}", parse_mode="markdown", reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("ƒêi t·ªõi C√†i ƒë·∫∑t", callback_data="showSettings")]]))
    elif "setChannelID" in cb.data:
        await cb.message.edit(
            text="Ok ,\nB√¢y gi·ªùh√™m t√¥i v√†o K√™nh v·ªõi t∆∞ c√°ch Qu·∫£n tr·ªã vi√™n & Chuy·ªÉn ti·∫øp Tin nh·∫Øn T·ª´ K√™nh.\n\nNh·∫•n /cancel ƒë·ªÉ H·ªßy qu√° tr√¨nh n√†y."
        )
        try:
            event_: Message = await bot.listen(cb.message.chat.id, timeout=300)
            if event_.forward_from_chat and ((await db.is_user_exist(event_.forward_from_chat.id)) is False):
                try:
                    _I, _err = await FetchMeOnChat(bot, chat_id=event_.forward_from_chat.id)
                    if _I == 404:
                        await cb.message.edit(f"Kh√¥ng th·ªÉ ch·ªânh s·ª≠a tin nh·∫Øn trong {str(event_.forward_from_chat.id)} !\nError: {_err}")
                        return
                    if _I and (_I.can_edit_messages is True):
                        if await db.find_user_id(channel_id=event_.forward_from_chat.id) is None:
                            try:
                                UserClient = await bot.get_chat_member(chat_id=event_.forward_from_chat.id, user_id=(await bot.get_me()).id)
                                if UserClient.can_edit_messages is True:
                                    await db.set_channel_id(cb.from_user.id, channel_id=event_.forward_from_chat.id)
                                    await cb.message.edit("ƒê√£ th√™m th√†nh c√¥ng k√™nh v√†o c∆° s·ªü d·ªØ li·ªáu!", reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("ƒêi t·ªõi C√†i ƒë·∫∑t", callback_data="showSettings")]]))
                                else:
                                    await cb.message.edit("Sorry,\nB·∫°n kh√¥ng c√≥ quy·ªÅn Ch·ªânh s·ª≠a Tin nh·∫Øn tr√™n K√™nh n√†y!")
                            except:
                                await cb.message.edit("Sorry,\nB·∫°n kh√¥ng ph·∫£i l√† Qu·∫£n tr·ªã vi√™n c·ªßa k√™nh n√†y!")
                        else:
                            await cb.message.edit("Sorry,\nƒê√£ c√≥ k√™nh n√†y trong C∆° s·ªü d·ªØ li·ªáu! Kh√¥ng th·ªÉ th√™m l·∫°i c√πng m·ªôt k√™nh.")
                    else:
                        await cb.message.edit(f"T√¥i kh√¥ng c√≥ quy·ªÅn ch·ªânh s·ª≠a tin nh·∫Øn trong {_I.title} !!\n\nVui l√≤ng cho ph√©p ng∆∞·ªùi kh√°c T√¥i kh√¥ng th·ªÉ th√™m Ch√¢n trang.")
                except UserNotParticipant:
                    await cb.message.edit("Kh√¥ng th·ªÉ th√™m k√™nh v√†o c∆° s·ªü d·ªØ li·ªáu!\nT√¥i kh√¥ng ph·∫£i l√† Qu·∫£n tr·ªã vi√™n trong K√™nh.")
                except Exception as err:
                    await cb.message.edit(f"Kh√¥ng th·ªÉ t√¨m th·∫•y k√™nh!\n\n**Error:** `{err}`", reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("OWOHUB üîû", url="https://t.me/OWOHUB")]]))
            elif event_.text and (event_.text == "/cancel"):
                await cb.message.edit("Qu√° tr√¨nh b·ªã h·ªßy!")
        except TimeoutError:
            await cb.message.edit("Unkil,\n5 ph√∫t tr√¥i qua!\nB√¢y gi·ªù k√≠ch ho·∫°t l·∫°i t·ª´ /settings üòê")


AHBot.run()
